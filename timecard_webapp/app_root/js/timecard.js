// Generated by CoffeeScript 1.4.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

jQuery(function() {
  var App, AppView, Timecard, TimecardList, TimecardView, Timecards;
  Timecard = (function(_super) {

    __extends(Timecard, _super);

    function Timecard() {
      return Timecard.__super__.constructor.apply(this, arguments);
    }

    Timecard.prototype.defaults = function() {
      var ret;
      ret = {
        title: "empty timecard...",
        order: Timecards.nextOrder(),
        done: false
      };
      return ret;
    };

    Timecard.prototype.initialize = function() {
      if (!this.get('title')) {
        this.set({
          title: this.defaults().title
        });
      }
    };

    Timecard.prototype.toggle = function() {
      this.save({
        done: !this.get('done')
      });
    };

    return Timecard;

  })(Backbone.Model);
  TimecardList = (function(_super) {

    __extends(TimecardList, _super);

    function TimecardList() {
      return TimecardList.__super__.constructor.apply(this, arguments);
    }

    TimecardList.prototype.model = Timecard;

    TimecardList.prototype.localStorage = new Backbone.LocalStorage("timecard-backbone");

    TimecardList.prototype.done = function() {
      return this.filter(function(timecard) {
        return timecard.get('done');
      });
    };

    TimecardList.prototype.remaining = function() {
      return this.without.apply(this, this.done());
    };

    TimecardList.prototype.nextOrder = function() {
      if (!this.length) {
        return 1;
      }
      return this.last().get('order') + 1;
    };

    TimecardList.prototype.comparator = function(timecard) {
      return timecard.get('order');
    };

    return TimecardList;

  })(Backbone.Collection);
  Timecards = new TimecardList();
  TimecardView = (function(_super) {

    __extends(TimecardView, _super);

    function TimecardView() {
      return TimecardView.__super__.constructor.apply(this, arguments);
    }

    TimecardView.prototype.tagName = 'li';

    TimecardView.prototype.template = _.template($('#item-template').html());

    TimecardView.prototype.events = {
      "click .toggle": "toggleDone",
      "dblclick .view": "edit",
      "click a.destroy": "clear",
      "keypress .edit": "updateOnEnter",
      "blur .edit": "close"
    };

    TimecardView.prototype.initialize = function() {
      this.model.on('change', this.render, this);
      return this.model.on('destroy', this.remove, this);
    };

    TimecardView.prototype.render = function() {
      this.$el.html(this.template(this.model.toJSON()));
      this.$el.toggleClass('done', this.model.get('done'));
      this.input = this.$('.edit');
      return this;
    };

    TimecardView.prototype.toggleDone = function() {
      this.model.toggle();
    };

    TimecardView.prototype.edit = function() {
      this.$el.addClass('editing');
      return this.input.focus();
    };

    TimecardView.prototype.close = function() {
      var value;
      value = this.input.val();
      if (!value) {
        return this.clear();
      } else {
        this.model.save({
          title: value
        });
        return this.$el.removeClass('editing');
      }
    };

    TimecardView.prototype.updateOnEnter = function(e) {
      if (e.keyCode === 13) {
        this.close();
      }
    };

    TimecardView.prototype.clear = function() {
      this.model.destroy();
    };

    return TimecardView;

  })(Backbone.View);
  AppView = (function(_super) {

    __extends(AppView, _super);

    function AppView() {
      return AppView.__super__.constructor.apply(this, arguments);
    }

    AppView.prototype.el = $('#timecardApp');

    AppView.prototype.statsTemplate = _.template($('#stats-template').html());

    AppView.prototype.events = {
      "keypress #new-timecard": "createOnEnter",
      "click #clear-completed": "clearCompleted",
      "click #toggle-all": "toggleAllComplete"
    };

    AppView.prototype.initialize = function() {
      this.input = this.$('#new-timecard');
      Timecards.on('add', this.addOne, this);
      Timecards.on('reset', this.addAll, this);
      Timecards.on('all', this.render, this);
      this.footer = this.$('footer');
      this.main = $('#main');
      return Timecards.fetch();
    };

    AppView.prototype.render = function() {
      var done, remaining;
      done = Timecards.done().length;
      remaining = Timecards.remaining().length;
      if (Timecards.length) {
        this.main.show();
        this.footer.show();
        this.footer.html(this.statsTemplate({
          done: done,
          remaining: remaining
        }));
      } else {
        this.main.hide();
        this.footer.hide();
      }
    };

    AppView.prototype.addOne = function(timecard) {
      var view;
      view = new TimecardView({
        model: timecard
      });
      this.$('#timecard-list').append(view.render().el);
    };

    AppView.prototype.addAll = function() {
      Timecards.each(this.addOne);
    };

    AppView.prototype.createOnEnter = function(e) {
      if (e.keyCode !== 13) {
        return;
      }
      if (!this.input.val()) {
        return;
      }
      Timecards.create({
        title: this.input.val()
      });
      this.input.val('');
    };

    AppView.prototype.clearCompleted = function() {
      _.invoke(Timecards.done(), 'destroy');
      return false;
    };

    AppView.prototype.toggleAllComplete = function() {
      Timecards.each(function(timecard) {
        timecard.save({
          done: done
        });
      });
    };

    return AppView;

  })(Backbone.View);
  return App = new AppView();
});
